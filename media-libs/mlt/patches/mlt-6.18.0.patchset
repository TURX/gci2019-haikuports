From d9173d8e8b3ae41472bd37b6b6cc947d2a9cc2cb Mon Sep 17 00:00:00 2001
From: TURX <turx2003@gmail.com>
Date: Fri, 17 Jan 2020 00:46:19 +0800
Subject: [PATCH] fix haiku support

---
 src/framework/mlt_consumer.c               | 8 ++++++++
 src/framework/mlt_slices.c                 | 2 ++
 src/modules/decklink/consumer_decklink.cpp | 2 ++
 src/modules/decklink/producer_decklink.cpp | 2 ++
 src/modules/plusgpl/consumer_cbrts.c       | 4 ++++
 src/modules/rtaudio/RtAudio.cpp            | 6 ++++++
 6 files changed, 24 insertions(+)

diff --git a/src/framework/mlt_consumer.c b/src/framework/mlt_consumer.c
index 21f02403..f8241ca2 100644
--- a/src/framework/mlt_consumer.c
+++ b/src/framework/mlt_consumer.c
@@ -1191,9 +1191,13 @@ static void consumer_work_start( mlt_consumer self )
 
 		priority.sched_priority = mlt_properties_get_int( MLT_CONSUMER_PROPERTIES( self ), "priority" );
 		pthread_attr_init( &thread_attributes );
+#ifndef __HAIKU__
 		pthread_attr_setschedpolicy( &thread_attributes, SCHED_OTHER );
+#endif
 		pthread_attr_setschedparam( &thread_attributes, &priority );
+#ifndef __HAIKU__
 		pthread_attr_setinheritsched( &thread_attributes, PTHREAD_EXPLICIT_SCHED );
+#endif
 		pthread_attr_setscope( &thread_attributes, PTHREAD_SCOPE_SYSTEM );
 
 		while ( n-- )
@@ -1779,9 +1783,13 @@ static void mlt_thread_create( mlt_consumer self, thread_function_t function )
 		{
 			pthread_attr_t thread_attributes;
 			pthread_attr_init( &thread_attributes );
+#ifndef __HAIKU__
 			pthread_attr_setschedpolicy( &thread_attributes, SCHED_OTHER );
+#endif
 			pthread_attr_setschedparam( &thread_attributes, &priority );
+#ifndef __HAIKU__
 			pthread_attr_setinheritsched( &thread_attributes, PTHREAD_EXPLICIT_SCHED );
+#endif
 			pthread_attr_setscope( &thread_attributes, PTHREAD_SCOPE_SYSTEM );
 			priv->ahead_thread = malloc( sizeof( pthread_t ) );
 			pthread_t *handle = priv->ahead_thread;
diff --git a/src/framework/mlt_slices.c b/src/framework/mlt_slices.c
index 60b17cd4..63e5daec 100644
--- a/src/framework/mlt_slices.c
+++ b/src/framework/mlt_slices.c
@@ -200,7 +200,9 @@ mlt_slices mlt_slices_init( int threads, int policy, int priority )
 		policy = SCHED_OTHER;
 	if ( priority < 0 )
 		priority = sched_get_priority_max( policy );
+#ifndef __HAIKU__
 	pthread_attr_setschedpolicy( &tattr, policy );
+#endif
 	param.sched_priority = priority;
 	pthread_attr_setschedparam( &tattr, &param );
 
diff --git a/src/modules/decklink/consumer_decklink.cpp b/src/modules/decklink/consumer_decklink.cpp
index 2ffdef04..c659c641 100644
--- a/src/modules/decklink/consumer_decklink.cpp
+++ b/src/modules/decklink/consumer_decklink.cpp
@@ -657,7 +657,9 @@ protected:
 			return;
 
 		pthread_attr_init(&tattr);
+#ifndef __HAIKU__
 		pthread_attr_setschedpolicy(&tattr, SCHED_FIFO);
+#endif
 
 		if ( !strcmp( "max", mlt_properties_get( properties, "priority" ) ) )
 			param.sched_priority = sched_get_priority_max(SCHED_FIFO) - 1;
diff --git a/src/modules/decklink/producer_decklink.cpp b/src/modules/decklink/producer_decklink.cpp
index 43e7fa46..75a7c5d3 100644
--- a/src/modules/decklink/producer_decklink.cpp
+++ b/src/modules/decklink/producer_decklink.cpp
@@ -457,7 +457,9 @@ public:
 				struct sched_param param;
 
 				pthread_attr_init(&tattr);
+#ifndef __HAIKU__
 				pthread_attr_setschedpolicy(&tattr, SCHED_FIFO);
+#endif
 
 				if ( !strcmp( "max", mlt_properties_get( properties, "priority" ) ) )
 					param.sched_priority = sched_get_priority_max(SCHED_FIFO) - 1;
diff --git a/src/modules/plusgpl/consumer_cbrts.c b/src/modules/plusgpl/consumer_cbrts.c
index 1e0e9528..fb3dcc01 100644
--- a/src/modules/plusgpl/consumer_cbrts.c
+++ b/src/modules/plusgpl/consumer_cbrts.c
@@ -917,9 +917,13 @@ static void start_output_thread( consumer_cbrts self )
 		pthread_attr_t thread_attributes;
 		pthread_attr_init( &thread_attributes );
 		priority.sched_priority = rtprio;
+#ifndef __HAIKU__
 		pthread_attr_setschedpolicy( &thread_attributes, SCHED_FIFO );
+#endif
 		pthread_attr_setschedparam( &thread_attributes, &priority );
+#ifndef __HAIKU__
 		pthread_attr_setinheritsched( &thread_attributes, PTHREAD_EXPLICIT_SCHED );
+#endif
 		pthread_attr_setscope( &thread_attributes, PTHREAD_SCOPE_SYSTEM );
 		if ( pthread_create( &self->output_thread, &thread_attributes, output_thread, self ) < 0 )
 		{
diff --git a/src/modules/rtaudio/RtAudio.cpp b/src/modules/rtaudio/RtAudio.cpp
index 50ee333f..769e580d 100644
--- a/src/modules/rtaudio/RtAudio.cpp
+++ b/src/modules/rtaudio/RtAudio.cpp
@@ -9141,12 +9141,18 @@ bool RtApiOss :: probeDeviceOpen( unsigned int device, StreamMode mode, unsigned
       else if ( priority > max ) priority = max;
       param.sched_priority = priority;
       pthread_attr_setschedparam( &attr, &param );
+#ifndef __HAIKU__
       pthread_attr_setschedpolicy( &attr, SCHED_RR );
     }
     else
       pthread_attr_setschedpolicy( &attr, SCHED_OTHER );
 #else
+    }
+#endif
+#else
+#ifndef __HAIKU__
     pthread_attr_setschedpolicy( &attr, SCHED_OTHER );
+#endif
 #endif
 
     stream_.callbackInfo.isRunning = true;
-- 
2.20.1

